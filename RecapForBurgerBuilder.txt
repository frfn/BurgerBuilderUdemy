----------------------------------------------------------------------------
1. Planning App
** Things WILL change, and that's perfectly normal.

- Component Tree / Structure
    Create, design and split into components

- Application State (Data) 
    Data we will be using in our application (this.state({...}))

- Component VS Container
    Which components should be Stateless or Stateful

----------------------------------------------------------------------------
2. Layout

- Draw a UI 
    Draw how the website/application will look like
    Nav bar, header, footer, content, images on page, body

Burger Builder
    Burger Picture (dynamic) - bunch of Styled Divs with CSS
    Contents for burger: add/remove cheese, burger, salad, bacon, etc.
    Checkout button, etc.

    App contains --> 
                    layout components  
                                    --> Toolbar
                                        --> Side drawer toggle
                                        --> Logo
                                        --> Nav items

                                    --> Side drawer
                                        --> Nav items

                                    --> Backdrop
                                        --> Opaque Div, when clicked should remove DIV, display: none

                                    --> Props + Children
                                        --> Burger Builder (Stateful/Container Class)
                                            --> Build Control
                                                --> Cheese, Meat, Burger
                                                --> Order Button

                                            --> Burger
                                                --> Ingredients will show under the burger component

                                            --> Modal (price, tax, etc.)
                                                --> Wrapper component

----------------------------------------------------------------------------
3. State ( Data )

- this.state({ ingredients: { ..code.. }})
    - purchased, totalprice
    - make it simple!

- Manage the state IN BURGER BUILDER, look at 2. Layout to see the location of Burger Builder.

- Optimize? Pure components, shouldComponentUpdate, etc!

----------------------------------------------------------------------------

Creating Project.

1. Create components
    Think of components you will need for project/use repeatedly
    - Create Aux.js for adjacent JSX, etc.

2. Form layout of project
    Place components where they should go, what components do you need

3. Create folders for components and see where they will go in your source code structure
    Ex. Burger(w/ other sub folders) is in Components 

4. Build components one by one
    Don't be too thorough, just see how the component will work with others!

5. Study code
    Every so often, stop and check code + test! 
        Logic, CSS, etc.

6. Burger Overview
    How is it working?
     - App.js --> Layout.js --> BurgerBuilder.js --> Burger.js --> BurgerIngredients.js
        BurgerIngredients.js returns DIVs that are styled, colors and shape has been altered from a rectangle.

7. Burger Overview Pt. II
    Burger has an interesting tranformation array (by Max), makes sense, confusing to follow tbh for people that doesn't know JS.
     - [...Array([props.ingredients[ingredientKey])] <-- results to [ [undefined], [undefined, undefined] ] 
    
     - One array that has multiple arrays... [ []. [], [] ], and in this case, we only care about the length of the array
       we do not care about the values inside array.

8. Learned some JavaScript methods
    - Note reduce can have an INITIAL value ... could be number, object, array, etc. BurgerBuilder uses [] as initial value, and uses .concat() to combine arrays.
    Using .push() without conditional check will give error. BECAUSE IT RETURNS THE LENGTH OF THE ARRAY AND NOT THE ARRAY ITSELF.

     - .reduce((accumulator, currentValue) => {
         if(currentValue in accumulator){
             accumulator[currentValue]++;
         }
         else {
             accumulator[currentValue] = 1;
         }
         return accumulator;
        }, {})

    - Note that .map can have '_' as blank as an argument that indicates blank, and it will return an array!
     - Here it will return an array of array, objects --> [ [{lol}], [{lol2}], [{lol3}] ]

    The obj.map(key => {
        return [...Array( ..code.. )]
        .map((_, i) => {
            return <JSX />
        }) 
    })
    
9. Added the Burger Control
    How does it work?
     - Less/More button is a <button> with onClick function
        - it takes in an argument, which in this case is 'type'
        - 'type' is collected when the the .map() is initiated in the BuildControl.js
        - When passing, the anonymous function of: () => func(type) is called and passed.
            - when button is clicked, 'type' is passed into the argument and the function runs.
                - FUNCTION takes in argument, grabs the value by this.state.ingredients[type]
                - conditional was created later
                - spread operator was used and the dynamic bracket notation were used
                - price is changed, and I used a Constant Object to keep track of the of price for each item
                - simple calculation of oldPrice + priceOfItem
                - this.setState({...})

    In render?
     - disableLess/disableMore were created
        Grabs the ingredients, then a for loop goes through each one and changes the value to a true or false value
            - it is then passed through components till it hits BuildControl.js and put in 'required={}' inside an HTML button tag

10. Checkout Button
    checkButton state was added, set to false
    created <button> tag in Build Controls, added CSS styling,

    CSS: 
     - new learn:
         - animation: enable–an argument, .4s–the duration of time, linear–kind of animation
         - @keyframes enable { percentages mean the loading of animation from 0% to 100% }

    updatePurchaseState() was added, takes in updatedIngredients argument,
     - called in the methods for adding/deleting ingredients
     - arg is taken because we were taking in OLD STATE which was giving us enexpected behavior

        uses .map() and .reduce()
         - .map() to grab the values inside ingredients obj
         - .reduce() to add the values up
             - if sum is zero, return false.

    In BuildControls.js 
     - disabled={!stateOfButton}
         if TRUE, set disabled, if FALSE, set enabled.
          since sum IS greater than 0, it will be TRUE, we have to !stateOfButton so it is enabled.

11. Modal + Back Drop + Summary
     BurgerBuilder
      - Added new state, 'purchaseNow'
      - Added purchase button METHOD, set 'purchaseNow' to true
      - Modal takes in the show property to see if button has been clicked
      - purchaseHandler is passed to BuildControls
     
     Modal
      - Wrapper, takes in 'show' property
      - It contains the OrderSummary
      - Has animation from inline styling (CSS inside file)
      - The styling hides it away from the page (if not CSS coded, it will show on document view)
      - Without CSS it will display on top of BurgerBuilder.js components
      - That is why the Modal can be coded as is in BurgerBuilder.js
        (above all the other Components!)

    Order Summary
     - used .map to return <li> elements
     - inside are key:value pairs
     - DO NOT forget to key the <li key={}> items
     - <span> so we can target the {key} value

    Backdrop
     - Backdrop is just a DIV that is 100% width/height
     - it is in the BACK because of the Z-INDEX: 100
     - MODAL is 500. <-- priority.
     - I passed in a declineHandler that if you click on Backdrop, set to purchase to false.

    Button Component
     - Created our own Button Component so we can reuse!
     - CANCEL button and CONTINUE button in Modal.js
     - CANCEL does exactly what clicking on the backdrop does
     
12. Toolbar
     - Created Navigation folder in Components folder
     - Toolbar.js + CSS
     - Very simple in the beginning
     - Imported to Layout.js
     - Changed CSS in Layout CSS because Toolbar overlaps Burger component
     
    Logo 
     - Downloaded burger-logo.png from Udemy
     - Created Logo folder and Logo.js AND CSS + created folder in Assets --> Images
     - Drag PNG to Images
     - In Toolbar.js, imported the logo!

    Navigation Items
     - This is a <ul> element that will include the NavigationItem component
     - CSS has been added
     - Added to Toolbars.js

        - NavigationItem.js 
         - <li> element with some CSS
         - will go inside NavigationItems.js 
         - .active is a class in CSS!


13. Side Drawer: We click on Menu, should bring out a side drawer (it is just a DIV, with a logo and HREF elements)
     - Creating side drawer component
         - important code is the CSS 'transform' transition
         - SideDrawer.js is in Layout.js, not in Toolbar.js

     - Responsive changes through CSS
         - Changed height back to 100% for the Logo
         - in respective CSS, changes the .Logo height to preferred
            - User error b/c I had different resolution size (ex. 375 x 667 in  Google Preview - Inpspect Code)
            - User error b/c I changed the Layout.module.css to 48px --> 75px .. burger touched border of Toolbar

    
     - Adjust NavigationItems.module.css
         - Main focus is Mobile View ** so in NavigationItem.js, I changed the base CSS, added an @media query for Desktop View
         - Fixed some CSS for SideDrawer, Toolbar, NavigationItem + NavigationItems
    
     - Adding backdrop when SideDrawer.js is opened for Mobile Device
         - When adding, there has to be a state to see if the SideDrawer has been toggled...
           so... we made Layout.js into a stateful component/class component
         - Error on my part, long struggle actually, I passed in a method, and not the value from state. D'oh.
         - I am leaving on creating logic to show sidebar or not. 

     - The logic I created works great, just didn't implement the CSS.
         - Created a 'let' variable to hold a list of styles.Classes, then use .join(' ') to use as a className
         - .Open & .Close animation plays
         - Created DrawerToggle folder --> DrawerToggle.js
             - Created a DIV element with onClick function
             - Function is passed from Layout.js 
                 - It changes showSideDrawer boolean value to 'true' since it is !prevState.showSideDrawer
             - When clicked, the CSS animation pushed the SideDrawer out

     - Side Drawer animation plus functionality all is dependant on CSS. Period.
         - The transition of it coming out, going back in.
             - transform property
         - DrawerToggle button disappearing
             - @media property 
             - display: none property

14. Focusing on PropTypes & the React Lifecycle Methods (componentDidMount, shouldComponentUpdate, componentDidUpdate, componentWillUnmount)
     - PropTypes
        - PropTypes are mainly used when working on 3rd party library, developer team applications, people that will be using the application
        - So in current Burger App, not much PropTypes are needed

     - Lifecycle Methods
         - Using componentDidUpdate for OrderSummary.js, checking to see if we rerender every time an order changes

         - Using shouldComponentUpdate in Modal.js
             - This checks whether if the user has clicked on Order Now button, 'show' is a boolean value that when click, will animate the modal to drop down (CSS), clicking Order Now sets boolean value to True, clicking Cancel or Transparent DIV (Backdrop) will set to False

15. Wrapping Up App Build
     - Changing Folder Structure which is optional
         - Layout.js is argued as an HOC component since it just wraps other components up, though, I think it's still just a component -- though I do agree ... could be in both folders
     - I downloaded all the resources already :D


------------------------------------------------------------------------------------------------------------------------

NEW SECTION: DATA BASE.

1. Installed Axios

2. Created Firebase account
    - Go to console
    - created new project
        - Realtime Database NOT, Firestore
        - Now we have the URL for the Database
            - The DB logic has already been created for me
            https://react-my-burger-b4a98.firebaseio.com/

3. Create Axios instance
    - axios.create({ baseURL: 'url-string'})
    - did not create a GLOBAL baseURL because I will be using another instance for Authorization
    
4. Sending POST requests!
    - import the axios instance that was created
        - import axios from 'loc-of-axios-instance'

    - Note that you need .json extension for Firebase Database to work, its like a MongoDB
        - axios.post('name.json')
        - created the order object filled with different properties
            - includes the price + ingredients

    - Side Note: 
        - Calculate Price IN the server to make sure the user is NOT manipulating the code and changing the price of order!
        - Having totalPrice in the order object would not be the real setup, recalculate the price ON the server

    - On Firebase, the 'orders' data was automatically made 
        - the axios 'post' method had '/orders' as the argument
        - the orders are now in the database

5. Spinner for sending a request!
    - CSS Spinner on Google and I just reused the code!
    - Created Spinner Folder in UI folder in Components
        - Created js file + css file with the spinner code
    - Logic has been created for the Spinner in BurderBuilder.js
        - New key added: 'loading: false'
        - {orderSummary} now is a conditional component
    - Changed the Modal.js file
        - shouldComponentUpdate also takes into account the children

6. Handling Errors
    - created folder withErrorHandling
        - HOC that wraps the BurgerBuilder
        - contains the error Handling
        - axios...use(null, error => {})
            - first argument: response config
            - second argument: error 

7. Requesting information FROM Firebase
    - Created ingredients folder
        - added the ingredients manually and value is 0
        - creating componentDidMount and fetching data from server
    -  Nulled ingredients
        - getting information from server
        - errors are happening because ingredients is ON the server,
          so ONLY when the ingredient has data, then grab the information
            - if ( this.state.ingredients ) is all you need

    - no .json from get method?
        - reason is in the withErrorHandler.js
            - lifecycle componentDidMount is the issue
                - Lifecycle
                    - constructor(props)
                    - componentWillMount
                    - render ()
                    - Render CHILD Components
                    - componentDidMount

            - withErrorHandler's child is BurderBuilder.js
                - BurgerBuilder ALSO has a componentDidMount
                    - to retreive the ingredients
                - Then only does withErrorHandler will call componentDidMount
                    - which is a problem since there is nothing to intercept
                - ERROR still happens because of unhandled rejection
                    - add .catch in BurgerBuilder.js
                    - adding error prop in state
                - withErrorHandler is a class that wraps the BurgerBuilder.js and adds 
                  a modal with the error. It does not keep reloading, it's loaded right away!
                  BurgerBuilder.js is the CHILD of it, the WrappedComponent!
    
    - MORAL: YOU MUST put .json in the url!

8. Cleaning up and removing interceptors
    - this.reqInterceptor = axios.interceptors.request.use(req => {
                this.setState({
                    error: null
                })
                return req;
            })
        - this.reqInterceptor is global and that is why it is prefixed with 'this'
            .. for this CURRENT (singular) component, it will have this state
        - created reqInterceptor and resInterceptor so I can unmount
        - axios.interceptors.request.eject(this.reqInterceptor);
            - eject removes the interceptors!

    - Used componentWillUnmount for deleting (ejecting) interceptors so I can prevent memory leaks
    - Cleaning up is important so that the app is more efficient and does create multiple useless interceptor

9. Routing
    - React is a component creation library
    - Routing 'makes' it into framework because of it's SPA properties
        - Show different page to users
        - Multiple different pages
            - about
            - login
            - content
            - etc.
        - SPA: Single Page Application
            - /
            - /blog
            - /blog/post/1
            - these are NOT seperate HTML files, they are rerendered Single Page
            - JavaScript rerender parts of the Single Page, or all of it!
    - Adding Routing Package
        - parse URL / path
        - developer configures different paths
        - Routing package reads the config
        - Render / Load the JSX/component code!
    - That is all.

    HOW TO USE:
        Check the routing exercises in Udemy folder!

------------------------------

Routing + Checkout Page

1. Create the components + CSS (module) 
    - CSS tip: center or 100% centers objects
    - CheckoutSummary.js 
    - Checkout.js

2. Checkout.js in App.js

3. Setting up Routing
    - Index.js -- BrowserRouter
    - App.js   -- Route

4. Changing continueHandler() in BurgerBuilder.js
    - commenting out the code that POSTs the information to Firebase
    Side Note:
        - Burger.js does NOT contain the Router properties because it is NOT loaded through a Route object.
            Fix: add an HOC wrapper from react dom router, export default withRouter(Burger)
    - this.props.history.push('/checkout'); routes to the checkout page

5. Routing in Checkout.js -- two methods that .goBack() and .replace() the current page

6. Grabbing ingredient info from query params!
    - BurgerBuilder.js -- continueHandler() -- pushed info through search params
    - Checkout.js -- using cDMount() to parse data -- used 'new URLSearchParams()' to split the information up

7. Adding forms -- ContactData.js in Containers/Checkout folder
    - Added dynamic handlers
    - <Form>
    - the query params are gone when page is refreshed and the burger is gone,
        but when you build from the start, the state is NOT lost and it does NOT rerender the component!
    - Added CSS for the FORM, looks like it is INSIDE a box now

8. ORDER SUBMISSION (tricky?)
    - in Checkout.js --> comment out component={ContactData}, use RENDER instead to open up a JSX code to grab the ingredients and pass it on to ContactData component 
    - 'invalid array length' -- refresh page is culprit -- this is because the ingredients was not passed in correctly! Page refreshes THEN the state is wiped
    - fix: use e.preventDefault(); so that the page does NOT reload
    - orderHandler() is created in ContactData.js!
        - POST request!!
        - This sends the stuff to the database
        - Dummy Data
    - Spinner is being set up so that when button is pressed, there is an action taking place!
        - Litty, it's nice to implement!
    - To redirect to the ROOT page -- we do the spread operator in Checkout.js
        - withRouter() HOC wrapper to ContactData
        - spread operator when passing in the properties of ContactData in Checkout.js!
            - does NOT need a variable just {...props}

9. Creating Orders page
    - Created Orders folder in Container
    - Created Order.js in Components/Order/Order.js
    - Module CSS transforms the classnames to UNIQUE names, meaning that 'active' will not work
        - fix: activeClassName={styles.active}
    - Both Buttons gets highlighted -- it treats the '/' as the prefix, so ALL buttons become 'active'
        - fix: NavLink can also use 'exact' so that it treats the path as EXACT (cannot be used with Link, must be NavLink)

10. Fetching Order
    - Axios to fetch!
    - The res.data is AN OBJECT full of objects, we need AN ARRAY.
    - creating an array of order objects
    - Modal IS NOT showing.. something is not working.
    - orders.js + order.js created!

11. Forms
    - Create new Input component
    - using spread operator in <input /> tag + you can add more elements like buttons, drops downs, etc.
    - using <Input /> in ContactData.js + inputType error! change to inputtype
    - Form information
        - JS Config ... take look at ContactData.js --> orderForm ... we're setting it up dynmaically
        - .map() the Input fields!
        - Transfrom Order object to an array
        - Error, no onChange handlers
            - create method for onChange function
            - <Input/> passes it to Input.js --> has the onChange function
            - If value is '', placeholder will show
            - it does change now!
    - Form Data has been fixed and sends correct data now, in ContactData.js
    - Validation
        - checkValidity
        - udpatedFormElement.valid = this.checkValidity()
        - && isValid ... isValid = true
        - Feedback: 
            - css
            - touch: adding this made the form react more, it senses what forms are touched
            - errorMessage, I can put in ContactData.js too, but as of now, it's in Input.js
        - this WHOLE time, I'm like... ok, i press Order... it still goes thru EVEN though the forms aren't completely filled...
            - Fix (Handling Overall Form):
                - Turn Off 'Order' button
                - undefined is ALWAYS treated as false
        - Fixing select error:
            - The validation + valid prop has been added
            - if (!rules) { return true };  in checkValidity()
            - can be implemented in both areas without problem!
            - BUG FOUND if value is EMPTY string in 'select' element
                - when clicking Order, it will SEND empty string, value ONLY changes when user clicks on element and chooses option, this can cause a major error!
                - you can just set {value: 'fastest'} , also fixes it quick!
                - I didn't use it, so I'm good. But a great error to catch!
    - Validation packages are available for third party! 
        - NPMjs has their own Validation 
        - Formsy
        - React
        - validationjs.org

12. Redux

Install react-redux & redux

Create Store folder + Reducer

Create Store in index.js

Create Reducer ALL the way to get no errors. No export default, no return state, all bad.

React Redux & React Router?! hmmmhmmm. 

Start SLOW. Two cases in ingredientsReducer

I dont have the same reducer as he does

    return {
        ...state,
        ingredients: {
            ...state.ingredients,
            [action.ingredientName]: state.ingredient[action.ingredientName] + 1
        }
    }

Reducer for ingredients DONE. EasY PZ.

Take a look at burger builder ... the methods have been commented out and moved to the reducer

How to take care of the ORDER NOW button?
Since checkoutButton is controlled by state, take it out BECAUSE it takes in INGREDIENTS. YOu can of course PUT IT IN REDUCER.

EVERYTHING IS CONNECTED TO THE REDUX PROPERTIES... even the LESS .. MORE buttons, variables are ... disableLess and disableMore

We just changed the ORDER NOW BUTTON... that was the LATEST thing you did.

You can have everything that manages state IN Redux... but you can also have state in LOCAL UI and manage it in the component.
So if you want a lean component/container, go for ALL-REDUX, if no, go for SEMI-REDUX.

Fixed the Checkout.js + Contact.js TO USE REDUX connect() to grab the ingredients and price from store.